package workflow;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SaveMode;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.StructType;
import org.apache.spark.storage.StorageLevel;

public class OverwriteTest {

	public static void main(String[] args) {
		String path = "D:\\data_test\\root\\DW_USER_M_201707";

		SparkSession spark = SparkSession.builder().master("local[4]").appName("Simple Application").getOrCreate();

		Dataset<Row> dataset = spark.read().option("header", "false").csv(path);

//		String repath = "";
//		int a = path.lastIndexOf("\\");
//		if (a == -1) {
//			repath = "." + path + "(" + System.currentTimeMillis() + ")";
//		} else {
//			repath = path.substring(0, a + 1) + "." + path.substring(a + 1) + "(" + System.currentTimeMillis()
//					+ ")";
//		}
//
//		dataset.write().csv(repath);
//
//		dataset = spark.read().csv(repath);
//
//		dataset.write().mode(SaveMode.Overwrite).csv(path);

//		Dataset<Row> dataset1 = new Dataset<Row>();

		String[] headers = {"USER_ID","PREV1_CUST_GRP_ID","PREV1_GRP_CODE","LAST_PHOTO_FLAG","CUR_PHOTO_FLAG","CUR_DEV_FLAG","CUR_LOGOUT_FLAG","TRANS_DATE","CUR_TRANS_FLAG","TILL_TRANS_FLAG","IS_OLD","IS_NEW","CUR_ADD_FLAG","IS_GROUP","IS_CALL","IS_LAND","IS_ONLY_VADD","IS_P2P_SMS","IS_ROAM_FLOW","BALANCE","BILL_FEE","PREV1_BILL_FEE","PREV2_BILL_FEE","PREV3_BILL_FEE","PREV4_BILL_FEE","PREV5_BILL_FEE","PREV6_BILL_FEE","PREV7_BILL_FEE","PREV8_BILL_FEE","PREV9_BILL_FEE","PREV10_BILL_FEE","PREV11_BILL_FEE","PREV12_BILL_FEE","CALL_DURA","PREV1_MO_DURA","TOT_MO_DURA","TOT_CALL_DURA","MO_DURA","MT_DURA","PREV1_CALL_DURA","PREV2_CALL_DURA","PREV3_CALL_DURA","PREV4_CALL_DURA","PREV5_CALL_DURA","BILLING_DURA","MO_BILLING_DURA","MT_BILLING_DURA","PREV1_BILLING_DURA","PREV2_BILLING_DURA","PREV3_BILLING_DURA","PREV4_BILLING_DURA","PREV5_BILLING_DURA","SMS_CNT","PREV1_SMS_CNT","PREV2_SMS_CNT","PREV3_SMS_CNT","PREV4_SMS_CNT","PREV5_SMS_CNT","DATA_FLOWUP","DATA_FLOWDN","GPRS_FLOW","PREV1_GPRS_FLOW","PREV2_GPRS_FLOW","PREV3_GPRS_FLOW","PREV4_GPRS_FLOW","PREV5_GPRS_FLOW","LTE_FLOW","PREV1_LTE_FLOW","PREV2_LTE_FLOW","PREV3_LTE_FLOW","PREV4_LTE_FLOW","PREV5_LTE_FLOW","TOT_GPRS_FLOW","OWE_LEN","TOT_OWE_FEE","BAD_FEE","FINANCIAL_OWE_FEE","NO_OWE_FEE","NO_INCOME_FEE","NEW_OWE_FEE","YEAR_OWE_FEE","WRTOFF_FEE","CANCEL_WRTOFF_FEE","CASH_WRTOFF_FEE","NCASH_WRTOFF_FEE","IS_OWE","OWE_FEE_SEG","PREV_OWE_BILL_FEE","CUR_OWE_BILL_FEE","HIGH_FLAG","INDUSTRY_FLAG","RENT_FEE","HQ_SVC_TYPE","P2P_CNT","CALL_CNT","YEAR_END_BILL_FEE","YEAR_BILL_FEE","FULLMNTH_RENT_FEE","UNICOM_4G","BUILDING_TYPE","BUILDING_ID","TRANS_3G_MONTH","BILL_USER_TYPE","GPRS_FLOW_CNT","GSM_FLOW_CNT","WCDMA_FLOW_CNT","GPRS_CNT","FEE_SEG","WAP_CNT","PSTN_CNT","FIRST_OWE_CYCLE_ID","LAST_OWE_CYCLE_ID","CALL_FEE","LTE_RECENT_DATE","RECENT_CALL_TIME","TOT_BILL_FEE","GRID_ID","PROV_LIST_TYPE","DEV_CHNL_TYPE","DEV_BELONG_DEPT","VIP_CUST_TYPE","GRP_EXPAND_TYPE","GRP_BUSI_DEPT_TYPE","BSS_DEV_CHNL_ID","ASSESS_COUNTY_ID","ASSESS_ZONE_ID","CONN_TYPE","CUST_INDUSTRY","CUST_TYPE","CENTREX_FLAG","SERVICE_STATUS","USER_ORDER_STATUS","ORG_TYPE","CUST_LVL","IS_RENT","IS_GRP","IS_CRBT","IS_WCDMA","IS_PHONE_VIDEO","MU_ID","MAINT_CHNL_ID","SERVER_CHNL_ID","IS_PSTN","IS_NORMAL_CRBT","IS_GRP_CRBT","IS_SUPER_CRBT","BELONG_DEPT","GRP_KIND1","IS_FORMAL","GRP_OLD_FLAG","GRP_TYPE","SVC_TYPE","RH_SVC_TYPE","PAY_MODE","AREA_ID","ACCEPT_COUNTY_ID","COUNTY_ID","XCOUNTY_ID","DEV_DATE","DEV_COUNTY_ID","BILLING_COUNTY_ID","ZONE_ID","TOWN_ID","ACCEPT_CHNL_ID","OPEN_CHNL","IN_CHNL","CHNL_ID","CHNL_TYPE","BUSI_GRID_ID","BRAND_ID","PROD_ID","PROD_TYPE","USER_TYPE","USER_KIND","PREV_USER_STATUS","USER_STATUS","STATUS_LEN","STATUS_LEN_MONTH","INNET_LEN","INNET_LEN_MONTH","PHONE_SEG","JOIN_DATE","OPEN_DATE","CLOSE_DATE","CREATE_TIME","CERT_TYPE","CERT_NUM","ACCT_TYPE","CUST_NAME","CUST_ADDR","VIP_CUST_NO","CRM2_GRP_ID","GRP_SVC_TYPE","GRP_ID","SERVICE_TYPE","FIRST_INNET_FLAG","DEV_FLAG","INNET_FLAG","ADD_FLAG","LOGOUT_FLAG","IS_WIRELESS","PREV1_CRM2_GRP_ID","PREV1_BRAND_ID","PREV1_PROD_ID","STAR_LVL","ACCT_ID","CUST_ID","USE_CUST_ID","SVC_NUM","SVC_NUM2","SIM_TYPE","SIM_NUM","CRDT_FEE","CREDIT_LVL","BASIC_CREDIT_VALUE","CREDIT_VALUE","OPERATOR_ID","SERV_LVL","PREV1_SERV_LVL","CUST_GRP_ID","DOWN_RATE","CUR_INNET_FLAG","DEV_CHNL_ID","DEVELOPER_ID","CUST_KIND","OWE_CUST_KIND","DEV_TYPE_ID","USER_ISVALID","ETL_DATA_CYCLE","ETL_TIME","CUST_CREATE_DATE","HOMETOWN_PROV_CODE_NAME","HOMETOWN_CITY_CODE_NAME","HOMETOWN_REGION_CODE_NAME","HOMETOWN_UNICOM_PROV_CODE","HOMETOWN_AREA_CODE","HOMETOWN_REGION_CODE","USER_ORDER_TYPE","IS_USIM","STOCK_FLAG","EFF_TIME","EXP_TIME","CANCEL_FLAG","CUR_CANCEL_FLAG","PASS_STOP_91_FLAG","CUR_PASS_STOP_91_FLAG","USER_ADDR","FLOW_PROD_ID","TYPE_ID","COMPONENT_ID","CUST_STATUS","STATUS_CHG_TIME","STATUS_CHG_TYPE","LAST_SERVICE_STATUS","LAST_STATUS_CHG_TYPE","LAST_STATUS_CHG_DATE","USER_NAME","ACCEPT_WAY","AGE","CERT_ADDR","COMB_TYPE","CUST_BIRTH","DEV_SPECIAL_TYPE","PREV1_STAR_LVL","PROTO_EXP_TIME","USER_SRC"};
		StructType structType = new StructType();
		for(String header: headers) {
			structType = structType.add(header, DataTypes.StringType);
		}

		Dataset<Row> df = spark.createDataFrame(dataset.toJavaRDD(), structType);
		df = df.limit(10000);

		df.write().mode(SaveMode.Overwrite).option("header", "true").csv("D:\\data_test\\DW_USER_M_201707_part");



	}

}
